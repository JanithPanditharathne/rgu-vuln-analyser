,code,category
0,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
1,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
2,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
3,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
4,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
5,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
6,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
7,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
8,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
9,"public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
10,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
11,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject ) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Object user_variableObject ) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
12,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
13,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
14,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
15,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
16,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
17,"public void user_methodB2G1Sink(int user_variable ) throws Throwable user_variable = 0; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds"");",non-vuln
18,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
19,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
20,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
21,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
22,public void user_method() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;,non-vuln
23,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
24,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
25,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
26,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
27,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
28,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
29,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
30,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
31,"String user_variable = user_variableContainer.containerOne; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
32,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
33,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
34,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
35,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap ) throws Throwable String user_variable = user_variableHashMap.get(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HashMap<Integer,String> user_variableHashMap ) throws Throwable String user_variable = user_variableHashMap.get(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
36,"public void Sink(HashMap<Integer,Integer> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
37,"public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
38,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
39,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
40,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
41,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
42,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
43,"public void user_methodB2GSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
44,"public void user_methodB2GSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
45,"public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
46,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
47,"public void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
48,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
49,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
50,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
51,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
52,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
53,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
54,"public void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable",non-vuln
55,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
56,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
57,"public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
58,"public void user_method() throws Throwable (); private void () throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink() throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink() throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
59,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
60,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] ) throws Throwable String user_variable = user_variableArray[2]; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variableArray[] ) throws Throwable String user_variable = user_variableArray[2]; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); static class Container public String containerOne;",non-vuln
61,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
62,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
63,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector ) throws Throwable String user_variable = user_variableVector.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Vector<String> user_variableVector ) throws Throwable String user_variable = user_variableVector.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
64,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
65,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
66,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
67,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
68,public void user_method() throws Throwable int user_variable; user_variable = -1; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;,non-vuln
69,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
70,"public void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; user_variable = 0;",non-vuln
71,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
72,"public void user_method() throws Throwable 1(); 2(); user_methodB2G1(); user_methodB2G2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false;",non-vuln
73,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
74,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
75,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
76,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = -1; user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = -1; user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
77,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
78,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
79,"public void user_methodB2GSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = (Integer)user_variableObject; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
80,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
81,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
82,"public void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
83,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
84,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
85,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = (new SecureRandom()).nextInt(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
86,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
87,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
88,"public void user_method() throws Throwable (); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_methodPrivate = false;",non-vuln
89,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
90,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
91,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
92,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
93,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
94,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat);",non-vuln
95,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
96,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
97,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
98,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList ) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(LinkedList<String> user_variableLinkedList ) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
99,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
100,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
101,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
102,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = -1; user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = -1; user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
103,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
104,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
105,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
106,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
107,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
108,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
109,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
110,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
111,"public void user_method() throws Throwable 1(); 2(); user_methodB2G1(); user_methodB2G2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;",non-vuln
112,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
113,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
114,"public void user_method() throws Throwable int user_variable; user_variable = -1; LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
115,"public void user_method() throws Throwable (); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink() throws Throwable String user_variable = user_variableBad; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
116,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
117,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
118,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
119,public void user_method() throws Throwable int user_variable; user_variable = 100;,non-vuln
120,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
121,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
122,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
123,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  InputStreamReader user_variable= null; BufferedReader user_variable = null; user_variable= new InputStreamReader(System.in, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
124,"public void user_method() throws Throwable (); private void () throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
125,"public void user_method() throws Throwable 1(); 2(); user_methodB2G1(); user_methodB2G2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
126,"public void Sink(int user_variableArray[] ) throws Throwable int user_variable = user_variableArray[2]; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
127,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
128,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable;",non-vuln
129,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable;",non-vuln
130,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); user_variable = 0;",non-vuln
131,"public void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = null; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
132,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
133,"public void user_method() throws Throwable (); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_variable = false;",non-vuln
134,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
135,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
136,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
137,"public void Sink(HashMap<Integer,Integer> user_variableHashMap ) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
138,"int user_variable = user_variableContainer.containerOne; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
139,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
140,"public void Sink(HashMap<Integer,Integer> user_variableHashMap ) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
141,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
142,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
143,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
144,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
145,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable;",non-vuln
146,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat);",non-vuln
147,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
148,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
149,"public void user_methodSink(Object user_variableObject ) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
150,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);",non-vuln
151,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
152,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
153,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
154,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
155,"public void user_method() throws Throwable (); private void () throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
156,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
157,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
158,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
159,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
160,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
161,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
162,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
163,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable;",non-vuln
164,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable;",non-vuln
165,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
166,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
167,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
168,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = -1; return user_variable;",non-vuln
169,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
170,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
171,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_variable = false;",non-vuln
172,"public void Sink(int user_variableArray[] ) throws Throwable int user_variable = user_variableArray[2]; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
173,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private String user_variableGoodB2G; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
174,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
175,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
176,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
177,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
178,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
179,"public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
180,"public void Sink(Vector<Integer> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableVector.remove(2); int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
181,"public void Sink(HashMap<Integer,Integer> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
182,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
183,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
184,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
185,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
186,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
187,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
188,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
189,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String user_variable = user_variableContainer.containerOne; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static String user_variable;",non-vuln
190,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
191,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
192,"public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
193,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
194,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable;",non-vuln
195,"public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
196,"public void user_method() throws Throwable (); private void () throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink() throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink() throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
197,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
198,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = 100; return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = 100; return user_variable;",non-vuln
199,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
200,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
201,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableBad; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
202,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2() throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
203,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
204,"public void user_method() throws Throwable (); private void () throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
205,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
206,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
207,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
208,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
209,"public void Sink(Vector<Integer> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableVector.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
210,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
211,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
212,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
213,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable = new Socket(""host.example.org"", 39544); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
214,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
215,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
216,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
217,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = 100; return user_variable;",non-vuln
218,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
219,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
220,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
221,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
222,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
223,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
224,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
225,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
226,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
227,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
228,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
229,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = 100; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
230,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
231,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
232,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
233,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
234,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = 100; return user_variable;",non-vuln
235,"public void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
236,"public void Sink(int user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableArray[2]; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
237,"public void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = null; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
238,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
239,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
240,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
241,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
242,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
243,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
244,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
245,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
246,"public void user_methodB2GSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
247,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
248,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
249,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
250,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
251,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
252,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
253,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
254,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
255,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
256,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
257,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
258,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
259,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); user_methodB2G1(request, response); user_methodB2G2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false;",non-vuln
260,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
261,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
262,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
263,"public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
264,"public void Sink() throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
265,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
266,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
267,"public void user_method() throws Throwable 1(); 2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5;",non-vuln
268,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
269,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
270,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
271,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
272,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
273,"public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
274,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
275,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
276,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
277,"public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
278,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
279,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
280,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
281,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
282,"public void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink);",non-vuln
283,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = -1; user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = -1; user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
284,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
285,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
286,"public void Sink(HashMap<Integer,Integer> user_variableHashMap ) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
287,"public void user_method() throws Throwable (); user_methodB2G(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink() throws Throwable int user_variable = user_variableBad; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
288,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
289,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
290,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
291,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
292,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = 100; user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = 100; user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
293,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
294,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
295,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = 100; user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = 100; user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
296,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
297,"public void user_methodSink(Object user_variableObject ) throws Throwable int user_variable = (Integer)user_variableObject; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
298,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
299,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList ) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
300,"public void Sink(HashMap<Integer,Integer> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
301,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
302,"public void Sink() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
303,"public void user_method() throws Throwable (); private void Sink() throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
304,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
305,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
306,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
307,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
308,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
309,"public void user_methodSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
310,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
311,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
312,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
313,"public void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
314,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
315,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
316,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
317,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
318,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = System.getenv(""ADD""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
319,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
320,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
321,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
322,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
323,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
324,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList ) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
325,"public void user_methodB2G1Sink(int user_variable ) throws Throwable user_variable = 0; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
326,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
327,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
328,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
329,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
330,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
331,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
332,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
333,"public void user_methodB2GSink(LinkedList<Integer> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds"");",non-vuln
334,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
335,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
336,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
337,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
338,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
339,"public void Sink(int user_variableArray[] ) throws Throwable int user_variable = user_variableArray[2]; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
340,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
341,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String user_variable = user_variableContainer.containerOne; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static String user_variable;",non-vuln
342,"int user_variable = user_variableContainer.containerOne; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
343,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = 100; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
344,"int user_variable = user_variableContainer.containerOne; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static int user_variable;",non-vuln
345,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
346,"public void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); user_variable = 0;",non-vuln
347,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
348,"public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
349,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1_private = false; user_variable = 1_source(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 1_source() throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2() throws Throwable String user_variable; 2_private = true; user_variable = 2_source(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 2_source() throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
350,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
351,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
352,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
353,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
354,"public void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); user_variable = 0;",non-vuln
355,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
356,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
357,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = System.getenv(""ADD""); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = System.getenv(""ADD""); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
358,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
359,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
360,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
361,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
362,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
363,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
364,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
365,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; listener = new ServerSocket(39543); user_variable = listener.accept(); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
366,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
367,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = -1; return user_variable;",non-vuln
368,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = request.getParameter(""name""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
369,"public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
370,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector ) throws Throwable String user_variable = user_variableVector.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(Vector<String> user_variableVector ) throws Throwable String user_variable = user_variableVector.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
371,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
372,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
373,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
374,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable;",non-vuln
375,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
376,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
377,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
378,"public void user_method() throws Throwable (); private void () throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
379,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = 100; return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = 100; return user_variable;",non-vuln
380,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
381,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
382,"public void user_method() throws Throwable (); private void () throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
383,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
384,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
385,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
386,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
387,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
388,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
389,"public void user_method() throws Throwable (); private void () throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable= new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
390,"public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); user_variable = null;",non-vuln
391,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
392,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
393,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
394,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = -1; return user_variable;",non-vuln
395,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat);",non-vuln
396,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
397,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
398,"public void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable",non-vuln
399,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
400,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
401,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
402,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
403,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
404,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
405,"public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
406,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
407,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
408,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
409,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = 100; user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = 100; user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
410,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
411,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable;",non-vuln
412,"public void user_methodB2GSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
413,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
414,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  InputStreamReader user_variable= null; BufferedReader user_variable = null; user_variable= new InputStreamReader(System.in, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
415,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
416,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
417,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
418,"public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = (Integer)user_variableObject; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
419,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
420,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable;",non-vuln
421,"public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
422,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader user_variable= null; BufferedReader user_variable = null; streamFileInput = new FileInputStream(file); user_variable= new InputStreamReader(streamFileInput, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
423,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
424,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
425,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
426,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
427,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
428,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
429,"public void user_method() throws Throwable 1(); 2(); user_methodB2G1(); user_methodB2G2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false;",non-vuln
430,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
431,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
432,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap ) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HashMap<Integer,String> user_variableHashMap ) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
433,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
434,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
435,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
436,"public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
437,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
438,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
439,"public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
440,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
441,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
442,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
443,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = System.getProperty(""user.home""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
444,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
445,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
446,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
447,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); user_variable = 0;",non-vuln
448,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
449,"public void user_methodB2GSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
450,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
451,"public void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = null; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink);",non-vuln
452,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
453,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
454,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
455,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
456,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
457,"public void Sink(HashMap<Integer,Integer> user_variableHashMap ) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
458,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
459,"public void Sink(int user_variableArray[] ) throws Throwable int user_variable = user_variableArray[2]; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
460,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
461,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
462,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
463,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
464,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
465,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
466,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);",non-vuln
467,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
468,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = 2; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
469,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable;",non-vuln
470,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
471,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
472,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
473,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
474,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
475,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
476,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; user_variable = 0;",non-vuln
477,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
478,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector ) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Vector<String> user_variableVector ) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
479,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
480,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
481,"public void user_methodB2GSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
482,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
483,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
484,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
485,"public void user_method() throws Throwable (); private void () throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
486,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); user_methodB2G1(request, response); user_methodB2G2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5;",non-vuln
487,"String user_variable = user_variableContainer.containerOne; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
488,"public void user_methodB2GSink(LinkedList<Integer> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
489,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
490,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
491,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
492,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
493,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
494,"public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
495,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
496,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
497,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
498,"public void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
499,"public void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
500,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
501,"public void user_methodSink(Object user_variableObject ) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
502,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
503,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
504,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); user_methodB2G1(request, response); user_methodB2G2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
505,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
506,"public void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
507,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
508,"public void user_method() throws Throwable (); private void () throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
509,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
510,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
511,"public void user_method() throws Throwable (); private void () throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  InputStreamReader user_variable= null; BufferedReader user_variable = null; user_variable= new InputStreamReader(System.in, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
512,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
513,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
514,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
515,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
516,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
517,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = System.getenv(""ADD""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
518,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
519,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
520,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
521,"public void user_methodB2GSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink);",non-vuln
522,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
523,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
524,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
525,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
526,"public void Sink(HashMap<Integer,Integer> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
527,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader user_variable= null; BufferedReader user_variable = null; streamFileInput = new FileInputStream(file); user_variable= new InputStreamReader(streamFileInput, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
528,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
529,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
530,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
531,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
532,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = 100; return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = 100; return user_variable;",non-vuln
533,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
534,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
535,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
536,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable;",non-vuln
537,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
538,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
539,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
540,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
541,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
542,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
543,"public void user_methodB2GSink(LinkedList<Integer> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
544,"public void Sink() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
545,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
546,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
547,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
548,"public void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
549,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
550,"public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
551,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
552,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
553,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
554,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
555,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = 2; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
556,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
557,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
558,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
559,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
560,"public void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
561,"public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
562,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
563,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable;",non-vuln
564,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
565,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
566,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
567,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
568,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable;",non-vuln
569,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
570,"public void user_method() throws Throwable (); private void () throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
571,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = System.getProperty(""user.home""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
572,"public void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
573,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home"");",non-vuln
574,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = -1; return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = -1; return user_variable;",non-vuln
575,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
576,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
577,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
578,"public void user_method() throws Throwable (); user_methodB2G(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink() throws Throwable int user_variable = user_variableBad; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
579,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable= new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
580,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
581,"public void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
582,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
583,"public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); user_variable = null;",non-vuln
584,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
585,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
586,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
587,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
588,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
589,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = 100; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
590,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
591,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2() throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
592,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
593,"public void user_methodB2GSink(LinkedList<Integer> user_variableLinkedList ) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
594,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable",non-vuln
595,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader user_variable= null; BufferedReader user_variable = null; streamFileInput = new FileInputStream(file); user_variable= new InputStreamReader(streamFileInput, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
596,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
597,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
598,"public void user_method() throws Throwable (); private void () throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
599,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
600,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
601,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableBad; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
602,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
603,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
604,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable;",non-vuln
605,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
606,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
607,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2() throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
608,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
609,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2() throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
610,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
611,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
612,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
613,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
614,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
615,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
616,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
617,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2() throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
618,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
619,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
620,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
621,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
622,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
623,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
624,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
625,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader user_variable= null; BufferedReader user_variable = null; streamFileInput = new FileInputStream(file); user_variable= new InputStreamReader(streamFileInput, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
626,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
627,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
628,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
629,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
630,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
631,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
632,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
633,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
634,"public void user_methodB2GSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
635,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
636,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
637,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
638,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
639,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
640,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
641,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
642,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
643,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable ) throws Throwable; public void action(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
644,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable= new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
645,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
646,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
647,"public void user_method() throws Throwable (); user_methodB2G(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
648,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat);",non-vuln
649,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
650,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = 2; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
651,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
652,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
653,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
654,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
655,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
656,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
657,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
658,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
659,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
660,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
661,"public void Sink(Vector<Integer> user_variableVector ) throws Throwable int user_variable = user_variableVector.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
662,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
663,"public void Sink(HashMap<Integer,Integer> user_variableHashMap ) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
664,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
665,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
666,"public void user_methodB2GSink(LinkedList<Integer> user_variableLinkedList ) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds"");",non-vuln
667,"public void Sink(Vector<Integer> user_variableVector ) throws Throwable int user_variable = user_variableVector.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
668,"public void user_method() throws Throwable (); private void Sink() throws Throwable String user_variable = user_variableGoodG2B; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
669,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
670,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
671,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
672,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
673,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
674,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableBad; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
675,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
676,"public void user_method() throws Throwable (); private void () throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
677,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
678,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
679,"public void Sink() throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
680,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
681,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
682,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); user_variable = 0;",non-vuln
683,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
684,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
685,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
686,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
687,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
688,"public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
689,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
690,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
691,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
692,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
693,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
694,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
695,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = (new SecureRandom()).nextInt(); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = (new SecureRandom()).nextInt(); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
696,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
697,"public void user_method() throws Throwable (); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink() throws Throwable String user_variable = user_variableBad; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
698,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
699,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
700,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
701,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
702,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
703,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
704,"public void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); user_variable = 0;",non-vuln
705,"public void user_methodB2GSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
706,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
707,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break; ",non-vuln
708,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
709,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
710,"int user_variable = user_variableContainer.containerOne; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static int user_variable;",non-vuln
711,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable;",non-vuln
712,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
713,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
714,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
715,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
716,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
717,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
718,"public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
719,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
720,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
721,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
722,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
723,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
724,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
725,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
726,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
727,"public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
728,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
729,"String user_variable = user_variableContainer.containerOne; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static String user_variable;",non-vuln
730,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
731,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable;",non-vuln
732,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
733,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; listener = new ServerSocket(39543); user_variable = listener.accept(); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
734,"public void user_method() throws Throwable (); private void () throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
735,"public void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
736,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable;",non-vuln
737,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
738,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
739,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
740,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
741,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
742,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
743,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
744,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = request.getParameter(""name""); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = request.getParameter(""name""); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
745,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = -1; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
746,"public void user_methodB2GSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
747,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
748,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
749,"public void user_method() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
750,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
751,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
752,"public void user_method() throws Throwable (); private void () throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
753,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
754,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
755,"public void user_method() throws Throwable (); private void () throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; listener = new ServerSocket(39543); user_variable = listener.accept(); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
756,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
757,"public void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
758,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
759,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
760,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
761,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable;",non-vuln
762,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
763,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
764,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
765,"public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
766,public void user_methodB2GSink(int user_variable ) throws Throwable,non-vuln
767,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
768,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
769,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
770,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable;",non-vuln
771,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
772,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
773,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
774,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = -1; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
775,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
776,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
777,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable= new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
778,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
779,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
780,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
781,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
782,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
783,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = System.getProperty(""user.home""); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = System.getProperty(""user.home""); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
784,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);",non-vuln
785,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
786,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
787,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
788,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
789,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
790,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = 100; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
791,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
792,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
793,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
794,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
795,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
796,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
797,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
798,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
799,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
800,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
801,"int user_variable = user_variableContainer.containerOne; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
802,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
803,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
804,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
805,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
806,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
807,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
808,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
809,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable ) throws Throwable; public void action(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
810,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
811,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
812,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
813,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
814,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
815,"public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable",non-vuln
816,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
817,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject ) throws Throwable String user_variable = (String)user_variableObject; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Object user_variableObject ) throws Throwable String user_variable = (String)user_variableObject; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
818,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; listener = new ServerSocket(39543); user_variable = listener.accept(); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
819,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
820,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
821,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
822,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
823,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
824,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
825,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
826,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
827,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
828,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
829,"public void user_methodSink(Object user_variableObject ) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
830,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
831,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
832,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
833,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
834,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
835,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
836,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
837,"public void user_methodSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
838,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
839,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
840,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
841,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
842,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader user_variable= null; BufferedReader user_variable = null; streamFileInput = new FileInputStream(file); user_variable= new InputStreamReader(streamFileInput, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
843,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
844,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); String user_variable = user_variableContainer.containerOne; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static String user_variable;",non-vuln
845,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
846,"public void Sink(Vector<Integer> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableVector.remove(2); int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
847,"public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
848,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
849,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
850,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
851,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
852,"public void Sink(int user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableArray[2]; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
853,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] ) throws Throwable String user_variable = user_variableArray[2]; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variableArray[] ) throws Throwable String user_variable = user_variableArray[2]; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); static class Container public String containerOne;",non-vuln
854,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
855,"public void Sink(Vector<Integer> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableVector.remove(2); int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
856,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
857,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
858,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
859,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
860,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
861,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
862,"public void user_methodB2GSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
863,"public void user_methodSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
864,"public void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds"");",non-vuln
865,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
866,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
867,"public void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); user_variable = 0;",non-vuln
868,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
869,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
870,"public void user_method() throws Throwable 1(); 2(); user_methodB2G1(); user_methodB2G2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5;",non-vuln
871,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
872,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
873,"public void user_method() throws Throwable (); private void () throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
874,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
875,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
876,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
877,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
878,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
879,"public void user_methodB2GSink(Object user_variableObject ) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
880,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
881,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = request.getParameter(""name""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
882,"public void user_methodB2GSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink);",non-vuln
883,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
884,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
885,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
886,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
887,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
888,"public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
889,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
890,"public void Sink(int user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableArray[2]; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
891,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);",non-vuln
892,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
893,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
894,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; listener = new ServerSocket(39543); user_variable = listener.accept(); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
895,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
896,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
897,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
898,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
899,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
900,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); user_methodB2G1(request, response); user_methodB2G2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5;",non-vuln
901,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
902,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
903,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
904,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
905,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
906,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] ) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variableArray[] ) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); static class Container public String containerOne;",non-vuln
907,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable;",non-vuln
908,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
909,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
910,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
911,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
912,"public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
913,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
914,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
915,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
916,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
917,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
918,"int user_variable = user_variableContainer.containerOne; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
919,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable;",non-vuln
920,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
921,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
922,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
923,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
924,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
925,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
926,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
927,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
928,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
929,public void user_method() throws Throwable int user_variable; user_variable = 100; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;,non-vuln
930,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
931,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
932,"public void user_method() throws Throwable (); private void () throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
933,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
934,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable;",non-vuln
935,"public void user_method() throws Throwable (); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink() throws Throwable String user_variable = user_variableBad; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
936,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
937,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
938,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
939,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = -1; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
940,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
941,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
942,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
943,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = 100; user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = 100; user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
944,"public void user_method() throws Throwable (); private void () throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader user_variable= null; BufferedReader user_variable = null; streamFileInput = new FileInputStream(file); user_variable= new InputStreamReader(streamFileInput, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
945,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
946,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public abstract void action(String user_variable ) throws Throwable; public void action(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (false) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFalse) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsFalse()) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFalse) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsFalse()) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = ""foo""; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); break; default: user_variable = null; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (5) case 6: user_variable = null; break; default: user_variable = ""foo""; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = ""foo""; break; default: user_variable = null; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = ""foo""; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); for (int i = 0; i < 1; i++) Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; for (int i = 0; i < 1; i++) Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_variable = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = true; user_variable = user_method_source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String user_method_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (user_variable) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; return user_variable; private boolean 1_private = false; private boolean 2_private = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1_private = false; user_variable = 1_source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String 1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2_private = true; user_variable = 2_source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String 2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static boolean 1PublicStatic = false; public static boolean 2PublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; return user_variable; public String 1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableCopy = user_variable; String user_variable = user_variableCopy; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodSink(user_variable , request, response ); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_methodSource(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = Source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableBad = user_variable; user_methodSink(request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); static class Container public String containerOne; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); String user_variable = user_variableContainer.containerOne; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static String user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); baseObject.action(user_variable , request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (false) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFalse) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsFalse()) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFalse) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsFalse()) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = request.getParameter(""name""); user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = ""foo""; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = request.getParameter(""name""); user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = request.getParameter(""name""); break; default: user_variable = null; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (5) case 6: user_variable = null; break; default: user_variable = ""foo""; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = ""foo""; break; default: user_variable = null; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = request.getParameter(""name""); break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = ""foo""; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); for (int i = 0; i < 1; i++) Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; for (int i = 0; i < 1; i++) Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_variable = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = true; user_variable = user_method_source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String user_method_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (user_variable) user_variable = request.getParameter(""name""); user_variable = null; return user_variable; private boolean 1_private = false; private boolean 2_private = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1_private = false; user_variable = 1_source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String 1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2_private = true; user_variable = 2_source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String 2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static boolean 1PublicStatic = false; public static boolean 2PublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_variable = null; return user_variable; public String 1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = request.getParameter(""name""); user_variableCopy = user_variable; String user_variable = user_variableCopy; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodSink(user_variable , request, response ); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_methodSource(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = Source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_variableBad = user_variable; user_methodSink(request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); static class Container public String containerOne; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); String user_variable = user_variableContainer.containerOne; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static String user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); baseObject.action(user_variable , request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (false) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFalse) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsFalse()) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFalse) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsFalse()) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = ""foo""; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive != 5) user_variable = null; user_variable = ""foo""; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = ""foo""; user_variable = null; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  break; default: user_variable = null; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (5) case 6: user_variable = null; break; default: user_variable = ""foo""; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = ""foo""; break; default: user_variable = null; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = ""foo""; break; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  for (int i = 0; i < 1; i++) Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; for (int i = 0; i < 1; i++) Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_variable = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = true; user_variable = user_method_source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String user_method_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (user_variable) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; return user_variable; private boolean 1_private = false; private boolean 2_private = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1_private = false; user_variable = 1_source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String 1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2_private = true; user_variable = 2_source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String 2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static boolean 1PublicStatic = false; public static boolean 2PublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; return user_variable; public String 1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableCopy = user_variable; String user_variable = user_variableCopy; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodSink(user_variable , request, response ); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_methodSource(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = Source(request, response); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableBad = user_variable; user_methodSink(request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); static class Container public String containerOne; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); String user_variable = user_variableContainer.containerOne; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static String user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  baseObject.action(user_variable , request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
947,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
948,"public void user_method() throws Throwable (); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
949,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; listener = new ServerSocket(39543); user_variable = listener.accept(); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
950,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
951,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
952,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject ) throws Throwable String user_variable = (String)user_variableObject; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(Object user_variableObject ) throws Throwable String user_variable = (String)user_variableObject; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
953,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
954,"int user_variable = user_variableContainer.containerOne; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
955,"public void user_method() throws Throwable (); user_methodB2G(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_variable = false;",non-vuln
956,"public void user_methodB2GSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds"");",non-vuln
957,"public void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
958,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
959,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
960,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
961,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; user_variable = ""foo""; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
962,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
963,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
964,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
965,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
966,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
967,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
968,"public void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds"");",non-vuln
969,"public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
970,"public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
971,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
972,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable;",non-vuln
973,"public void user_method() throws Throwable 1(); 2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false;",non-vuln
974,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
975,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
976,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
977,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
978,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
979,"public void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = 0; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
980,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
981,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue();",non-vuln
982,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2() throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
983,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
984,"public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
985,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
986,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList ) throws Throwable String user_variable = user_variableLinkedList.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(LinkedList<String> user_variableLinkedList ) throws Throwable String user_variable = user_variableLinkedList.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
987,"public void user_methodB2GSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
988,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
989,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
990,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
991,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
992,"public void user_methodSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
993,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
994,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
995,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
996,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
997,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1_private = false; user_variable = 1_source(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 1_source() throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2() throws Throwable String user_variable; 2_private = true; user_variable = 2_source(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 2_source() throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
998,"public void Sink(HashMap<Integer,Integer> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableHashMap.get(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
999,"public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1000,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1001,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
1002,"public void user_method() throws Throwable (); private void Sink() throws Throwable String user_variable = user_variableGoodG2B; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1003,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableBad; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1004,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2() throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1005,"public void user_methodSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
1006,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
1007,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
1008,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
1009,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1010,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1011,"public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1012,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1013,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G1PublicStatic = false; private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2G2PublicStatic = true; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1014,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable= new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1015,"public void user_method() throws Throwable (); user_methodB2G(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink() throws Throwable int user_variable = user_variableBad; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1016,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = 100; return user_variable;",non-vuln
1017,"public void user_method() throws Throwable (); private void () throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink() throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink() throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
1018,"public void user_methodB2GSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); int user_variable = (Integer)streamObjectInput.readObject(); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
1019,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1020,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable = new Socket(""host.example.org"", 39544); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
1021,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1022,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1023,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1024,"String user_variable = user_variableContainer.containerOne; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static String user_variable;",non-vuln
1025,"public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1026,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private String user_variableGoodB2G; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1027,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1028,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1029,"public void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable",non-vuln
1030,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList ) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1031,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = System.getenv(""ADD""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1032,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1033,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
1034,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1035,"public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1036,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1037,"public void user_methodB2GSink(Object user_variableObject ) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds"");",non-vuln
1038,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); user_methodB2G1(request, response); user_methodB2G2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;",non-vuln
1039,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1040,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1041,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1042,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1043,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1044,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1045,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1046,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
1047,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1048,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable;",non-vuln
1049,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
1050,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1051,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
1052,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
1053,"public void Sink(Vector<Integer> user_variableVector ) throws Throwable int user_variable = user_variableVector.remove(2); int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1054,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
1055,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2() throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1056,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1057,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable = new Socket(""host.example.org"", 39544); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
1058,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1059,"public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable",non-vuln
1060,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1061,"public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1062,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
1063,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1064,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name"");",non-vuln
1065,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1066,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable , request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1067,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1068,"public void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1069,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1070,"public void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1071,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);",non-vuln
1072,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1073,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1074,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1075,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1076,"public void user_method() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1077,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1078,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1079,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1080,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1081,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1082,"public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); user_variable = null;",non-vuln
1083,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1084,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1085,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1086,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
1087,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1088,"public void user_method() throws Throwable 1(); 2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1089,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
1090,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList ) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1091,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable;",non-vuln
1092,"public void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1093,"public void user_method() throws Throwable (); private void () throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable = new Socket(""host.example.org"", 39544); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
1094,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1095,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1096,"public void user_methodB2GSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1097,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1098,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1099,"public void user_method() throws Throwable (); user_methodB2G(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink() throws Throwable int user_variable = user_variableBad; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1100,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = 100; return user_variable;",non-vuln
1101,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1102,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1103,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
1104,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1105,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1106,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1107,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1108,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
1109,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1110,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1111,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1112,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
1113,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable= new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1114,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
1115,"public void user_methodSink(LinkedList<Integer> user_variableLinkedList ) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1116,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable ) throws Throwable; public void action(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (false) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFalse) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsFalse()) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFalse) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsFalse()) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = ""foo""; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); break; default: user_variable = null; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (5) case 6: user_variable = null; break; default: user_variable = ""foo""; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = ""foo""; break; default: user_variable = null; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = ""foo""; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); for (int i = 0; i < 1; i++) if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; for (int i = 0; i < 1; i++) if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_methodPrivate = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPrivate = true; user_variable = user_method_source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String user_method_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (user_methodPrivate) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; return user_variable; private boolean 1_private = false; private boolean 2_private = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1_private = false; user_variable = 1_source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2_private = true; user_variable = 2_source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static boolean 1PublicStatic = false; public static boolean 2PublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; return user_variable; public String 1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodSink(user_variable , request, response ); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_methodSource(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = Source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableBad = user_variable; user_methodSink(request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); static class Container public String containerOne; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String user_variable = user_variableContainer.containerOne; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static String user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); baseObject.action(user_variable , request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (false) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFalse) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsFalse()) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFalse) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsFalse()) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = request.getParameter(""name""); user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = ""foo""; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = request.getParameter(""name""); user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = request.getParameter(""name""); break; default: user_variable = null; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (5) case 6: user_variable = null; break; default: user_variable = ""foo""; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = ""foo""; break; default: user_variable = null; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = request.getParameter(""name""); break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = ""foo""; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); for (int i = 0; i < 1; i++) if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; for (int i = 0; i < 1; i++) if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_methodPrivate = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPrivate = true; user_variable = user_method_source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String user_method_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (user_methodPrivate) user_variable = request.getParameter(""name""); user_variable = null; return user_variable; private boolean 1_private = false; private boolean 2_private = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1_private = false; user_variable = 1_source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2_private = true; user_variable = 2_source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static boolean 1PublicStatic = false; public static boolean 2PublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_variable = null; return user_variable; public String 1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = request.getParameter(""name""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodSink(user_variable , request, response ); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_methodSource(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = Source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_variableBad = user_variable; user_methodSink(request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); static class Container public String containerOne; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String user_variable = user_variableContainer.containerOne; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static String user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); baseObject.action(user_variable , request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (false) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFalse) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsFalse()) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFalse) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsFalse()) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = ""foo""; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive != 5) user_variable = null; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = ""foo""; user_variable = null; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  break; default: user_variable = null; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (5) case 6: user_variable = null; break; default: user_variable = ""foo""; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = ""foo""; break; default: user_variable = null; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = ""foo""; break; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  for (int i = 0; i < 1; i++) if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; for (int i = 0; i < 1; i++) if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_methodPrivate = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPrivate = true; user_variable = user_method_source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String user_method_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (user_methodPrivate) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; return user_variable; private boolean 1_private = false; private boolean 2_private = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1_private = false; user_variable = 1_source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2_private = true; user_variable = 2_source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static boolean 1PublicStatic = false; public static boolean 2PublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; return user_variable; public String 1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodSink(user_variable , request, response ); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_methodSource(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = Source(request, response); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableBad = user_variable; user_methodSink(request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); static class Container public String containerOne; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String user_variable = user_variableContainer.containerOne; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static String user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  baseObject.action(user_variable , request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
1117,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1118,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1119,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
1120,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1121,"public void user_methodB2GSink(Object user_variableObject ) throws Throwable int user_variable = (Integer)user_variableObject; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1122,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
1123,"public void Sink(int user_variableArray[] ) throws Throwable int user_variable = user_variableArray[2]; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1124,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1125,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
1126,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1127,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1128,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1129,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1130,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1131,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
1132,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable;",non-vuln
1133,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable;",non-vuln
1134,"String user_variable = user_variableContainer.containerOne; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static String user_variable;",non-vuln
1135,"public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
1136,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
1137,"public void user_method() throws Throwable (); private void () throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
1138,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1139,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1140,"public void user_method() throws Throwable int user_variable; user_variable = 100; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1141,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = System.getProperty(""user.home""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
1142,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable;",non-vuln
1143,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = 100; return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = 100; return user_variable;",non-vuln
1144,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
1145,"public void user_method() throws Throwable int user_variable; user_variable = 100; LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
1146,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1147,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1148,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable;",non-vuln
1149,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1150,"String user_variable = user_variableContainer.containerOne; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
1151,"public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
1152,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = -1; return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = -1; return user_variable;",non-vuln
1153,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = request.getParameter(""name""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1154,public void user_method() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt();,non-vuln
1155,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1156,"public void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = 0; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds"");",non-vuln
1157,"public void Sink(int user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableArray[2]; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1158,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1159,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1160,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1161,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1162,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1163,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
1164,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1165,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
1166,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
1167,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1168,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);",non-vuln
1169,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable = new Socket(""host.example.org"", 39544); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1170,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1171,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1172,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1173,"public void user_methodB2G1Sink(int user_variable ) throws Throwable user_variable = 0; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1174,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1175,"public void Sink(Vector<Integer> user_variableVector ) throws Throwable int user_variable = user_variableVector.remove(2); int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1176,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1177,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1178,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1179,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1180,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1181,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
1182,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1183,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1184,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1185,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1186,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1187,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1188,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
1189,"public void user_method() throws Throwable (); user_methodB2G(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink() throws Throwable int user_variable = user_variableBad; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1190,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1191,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1192,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1193,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  Socket user_variable = null; BufferedReader user_variable = null; InputStreamReader user_variable= null; user_variable = new Socket(""host.example.org"", 39544); user_variable= new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
1194,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1195,"public void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1196,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1197,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1198,"public void user_method() throws Throwable 1(); 2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;",non-vuln
1199,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1200,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1201,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = request.getParameter(""name""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
1202,"public void user_method() throws Throwable int user_variable; user_variable = -1; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1203,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1204,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1205,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1206,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public void action(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1207,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1208,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap ) throws Throwable String user_variable = user_variableHashMap.get(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(HashMap<Integer,String> user_variableHashMap ) throws Throwable String user_variable = user_variableHashMap.get(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
1209,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1210,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); user_methodB2G1(request, response); user_methodB2G2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false;",non-vuln
1211,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1212,public void Sink(int user_variable ) throws Throwable,non-vuln
1213,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
1214,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = -1; return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = -1; return user_variable;",non-vuln
1215,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  InputStreamReader user_variable= null; BufferedReader user_variable = null; user_variable= new InputStreamReader(System.in, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1216,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
1217,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = -1; user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1218,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1219,"public void Sink(Vector<Integer> user_variableVector ) throws Throwable int user_variable = user_variableVector.remove(2); int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1220,"public void user_method() throws Throwable 1(); 2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5;",non-vuln
1221,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);",non-vuln
1222,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1223,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1224,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable;",non-vuln
1225,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD"");",non-vuln
1226,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
1227,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1228,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); return user_variable;",non-vuln
1229,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1230,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1231,"public void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1232,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1233,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1234,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = -1; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1235,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1236,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1237,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
1238,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
1239,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1240,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1241,"public void user_methodSink(Object user_variableObject ) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1242,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1243,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1244,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1245,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1246,"public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1247,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1248,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1249,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1250,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1251,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private String user_variableGoodB2G; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1252,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1253,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1254,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1255,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; Sink(user_variable , request, response ); private void user_methodB2GSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
1256,public void user_method() throws Throwable int user_variable; user_variable = -1;,non-vuln
1257,"public void Sink() throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1258,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1259,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = -1; user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = -1; user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1260,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable;",non-vuln
1261,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1262,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = request.getParameter(""name""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from parameter 'name'"", exceptNumberFormat); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1263,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = 100; user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = 100; user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1264,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1265,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1266,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable public void Sink(String user_variable ) throws Throwable public void user_methodSink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
1267,"public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
1268,"public void Sink(Vector<Integer> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableVector.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1269,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_variableBad; private int user_variableGoodG2B; private int user_variableGoodB2G; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableBad; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1270,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1271,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1272,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1273,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1274,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
1275,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1276,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized ) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO);",non-vuln
1277,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1278,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1279,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable;",non-vuln
1280,"int user_variable = user_variableContainer.containerOne; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static int user_variable;",non-vuln
1281,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1282,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
1283,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1_private = false; user_variable = 1_source(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String 1_source() throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2() throws Throwable String user_variable; 2_private = true; user_variable = 2_source(); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private String 2_source() throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1284,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1285,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1286,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1287,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1288,"public void user_methodB2GSink(LinkedList<Integer> user_variableLinkedList ) throws Throwable int user_variable = user_variableLinkedList.remove(2); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1289,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); LinkedList<Integer> user_variableLinkedList = new LinkedList<Integer>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable);",non-vuln
1290,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1291,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1292,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable ) throws Throwable; public void action(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (false) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFalse) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsFalse()) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFalse) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsFalse()) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = ""foo""; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); break; default: user_variable = null; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (5) case 6: user_variable = null; break; default: user_variable = ""foo""; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = ""foo""; break; default: user_variable = null; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = ""foo""; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); for (int i = 0; i < 1; i++) String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; for (int i = 0; i < 1; i++) String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_methodPrivate = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPrivate = true; user_variable = user_method_source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String user_method_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (user_methodPrivate) user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; return user_variable; private boolean 1_private = false; private boolean 2_private = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1_private = false; user_variable = 1_source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2_private = true; user_variable = 2_source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static boolean 1PublicStatic = false; public static boolean 2PublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variable = null; return user_variable; public String 1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableCopy = user_variable; String user_variable = user_variableCopy; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodSink(user_variable , request, response ); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_methodSource(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = Source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_variableBad = user_variable; user_methodSink(request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); static class Container public String containerOne; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String user_variable = user_variableContainer.containerOne; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static String user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); baseObject.action(user_variable , request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (false) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFalse) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsFalse()) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFalse) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsFalse()) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = request.getParameter(""name""); user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = ""foo""; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = request.getParameter(""name""); user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = request.getParameter(""name""); break; default: user_variable = null; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (5) case 6: user_variable = null; break; default: user_variable = ""foo""; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = ""foo""; break; default: user_variable = null; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = request.getParameter(""name""); break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = ""foo""; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); for (int i = 0; i < 1; i++) String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; for (int i = 0; i < 1; i++) String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_methodPrivate = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPrivate = true; user_variable = user_method_source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String user_method_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (user_methodPrivate) user_variable = request.getParameter(""name""); user_variable = null; return user_variable; private boolean 1_private = false; private boolean 2_private = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1_private = false; user_variable = 1_source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2_private = true; user_variable = 2_source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static boolean 1PublicStatic = false; public static boolean 2PublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_variable = null; return user_variable; public String 1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = request.getParameter(""name""); user_variableCopy = user_variable; String user_variable = user_variableCopy; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodSink(user_variable , request, response ); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_methodSource(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = Source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_variableBad = user_variable; user_methodSink(request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); static class Container public String containerOne; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String user_variable = user_variableContainer.containerOne; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static String user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); baseObject.action(user_variable , request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (false) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (true) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (5 == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final boolean PRIVATE_STATIC_FINAL_TRUE = true; private static final boolean PRIVATE_STATIC_FINAL_FALSE = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateTrue = true; private boolean privateFalse = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFalse) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateTrue) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private static final int PRIVATE_STATIC_FINAL_FIVE = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (PRIVATE_STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateFive == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsFalse()) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (privateReturnsTrue()) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FALSE) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_TRUE) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFalse) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticTrue) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsFalse()) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrue()) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticReturnsTrueOrFalse()) user_variable = ""foo""; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.STATIC_FINAL_FIVE == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive != 5) user_variable = null; user_variable = ""foo""; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (IO.staticFive == 5) user_variable = ""foo""; user_variable = null; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  break; default: user_variable = null; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (5) case 6: user_variable = null; break; default: user_variable = ""foo""; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; switch (6) case 6: user_variable = ""foo""; break; default: user_variable = null; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; while (true) user_variable = ""foo""; break; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  for (int i = 0; i < 1; i++) String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; for (int i = 0; i < 1; i++) String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean user_methodPrivate = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPrivate = true; user_variable = user_method_source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String user_method_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if (user_methodPrivate) user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; return user_variable; private boolean 1_private = false; private boolean 2_private = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1_private = false; user_variable = 1_source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (1_private) user_variable = null; user_variable = ""foo""; return user_variable; private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2_private = true; user_variable = 2_source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String 2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = null; if (2_private) user_variable = ""foo""; user_variable = null; return user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_methodPublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static boolean 1PublicStatic = false; public static boolean 2PublicStatic = false; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable 1(request, response); 2(request, response); private void 1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 1PublicStatic = false; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; 2PublicStatic = true; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variable = null; return user_variable; public String 1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableCopy = user_variable; String user_variable = user_variableCopy; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_methodSink(user_variable , request, response ); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_methodSource(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = Source(request, response); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_variableBad; private String user_variableGoodG2B; private void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableBad; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  user_variableBad = user_variable; user_methodSink(request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; String[] user_variableArray = new String[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); static class Container public String containerOne; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); String user_variable = user_variableContainer.containerOne; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); String user_variable = user_variableContainer.containerOne; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static String user_variable; public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(Vector<String> user_variableVector , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableVector.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(LinkedList<String> user_variableLinkedList , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableLinkedList.remove(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(HashMap<Integer,String> user_variableHashMap , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableHashMap.get(2); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void Sink(byte[] user_variableSerialized , HttpServletRequest request, HttpServletResponse response) throws Throwable ByteArrayInputStream streamByteArrayInput = null; ObjectInputStream streamObjectInput = null; streamByteArrayInput = new ByteArrayInputStream(user_variableSerialized); streamObjectInput = new ObjectInputStream(streamByteArrayInput); String user_variable = (String)streamObjectInput.readObject(); String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); IO.logger.log(Level.WARNING, ""IOException in deserialization"", exceptIO); IO.logger.log(Level.WARNING, ""ClassNotFoundException in deserialization"", exceptClassNotFound); if (streamObjectInput != null) streamObjectInput.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectInputStream"", exceptIO); if (streamByteArrayInput != null) streamByteArrayInput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayInputStream"", exceptIO); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = token.substring(3);  break;  baseObject.action(user_variable , request, response); public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
1293,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = 100; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1294,"public void Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); user_variable = 0;",non-vuln
1295,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1296,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1297,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1298,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1299,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break; ",non-vuln
1300,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1301,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1302,"public void user_methodB2G1Sink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = 0; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1303,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
1304,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1305,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable;",non-vuln
1306,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1307,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1308,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = 100; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1309,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
1310,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1311,"public void user_method() throws Throwable 1(); 2(); user_methodB2G1(); user_methodB2G2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int privateFive = 5;",non-vuln
1312,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public void Sink(String user_variable ) throws Throwable if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);",non-vuln
1313,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); return user_variable;",non-vuln
1314,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public abstract void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public void action(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink);",non-vuln
1315,"public void user_method() throws Throwable 1(); 2(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private boolean privateReturnsTrue() return true; private boolean privateReturnsFalse() return false;",non-vuln
1316,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
1317,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); return user_variable;",non-vuln
1318,public void user_methodSink(int user_variable ) throws Throwable,non-vuln
1319,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
1320,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1321,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
1322,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1323,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1324,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); Vector<String> user_variableVector = new Vector<String>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1325,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1326,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1327,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = System.getProperty(""user.home""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1328,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1329,"public void Sink(int user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = user_variableArray[2]; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1330,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); user_variable = resultSet.getString(1); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1331,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; LinkedList<String> user_variableLinkedList = new LinkedList<String>(); user_variableLinkedList.add(0, user_variable); user_variableLinkedList.add(1, user_variable); user_variableLinkedList.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void user_methodSink(LinkedList<String> user_variableLinkedList ) throws Throwable String user_variable = user_variableLinkedList.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public void Sink(LinkedList<String> user_variableLinkedList ) throws Throwable String user_variable = user_variableLinkedList.remove(2); Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
1332,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); return user_variable;",non-vuln
1333,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) user_variable = cookieSources[0].getValue(); return user_variable;",non-vuln
1334,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable; public String Source(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; return user_variable; public String user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); return user_variable;",non-vuln
1335,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);",non-vuln
1336,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1337,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1338,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  return user_variable;",non-vuln
1339,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable user_variable = 2; private void user_methodB2G() throws Throwable user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1340,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1341,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); ByteArrayOutputStream streamByteArrayOutput = null; ObjectOutput outputObject = null; streamByteArrayOutput = new ByteArrayOutputStream() ; outputObject = new ObjectOutputStream(streamByteArrayOutput) ; outputObject.writeObject(user_variable); byte[] user_variableSerialized = streamByteArrayOutput.toByteArray(); IO.logger.log(Level.WARNING, ""IOException in serialization"", exceptIO); if (outputObject != null) outputObject.close(); IO.logger.log(Level.WARNING, ""Error closing ObjectOutputStream"", exceptIO); if (streamByteArrayOutput != null) streamByteArrayOutput.close(); IO.logger.log(Level.WARNING, ""Error closing ByteArrayOutputStream"", exceptIO);",non-vuln
1342,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); HashMap<Integer,String> user_variableHashMap = new HashMap<Integer,String>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1343,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = request.getParameter(""name""); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1344,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void 2() throws Throwable String user_variable; 2PublicStatic = true; Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1345,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getenv(""ADD""); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1346,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1347,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  InputStreamReader user_variable= null; BufferedReader user_variable = null; user_variable= new InputStreamReader(System.in, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable;",non-vuln
1348,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; if(System.getProperty(""os.name"").toLowerCase().indexOf(""win"") >= 0) user_variable = ""C:\\uploads\\""; user_variable = ""/home/user/uploads/""; if (user_variable != null) File file = new File(user_variable + user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  InputStreamReader user_variable= null; BufferedReader user_variable = null; user_variable= new InputStreamReader(System.in, ""UTF-8""); user_variable = new BufferedReader(readerInputStream); user_variable = user_variable.readLine(); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable!= null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
1349,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
1350,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1351,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1352,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = System.getenv(""ADD""); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1353,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1354,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1355,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable , request, response ); private void user_methodB2GSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); user_methodB2GSink(user_variable , request, response ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = System.getProperty(""user.home""); return user_variable;",non-vuln
1356,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = ""foo""; user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variableCopy; String user_variable; user_variable = """";  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); user_variableCopy = user_variable; String user_variable = user_variableCopy; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1357,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
1358,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1359,"public void user_method() throws Throwable 1(); 2(); private void 1() throws Throwable String user_variable; 1PublicStatic = false; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); private void 2() throws Throwable String user_variable; 2PublicStatic = true; if (user_variable != null) File file = new File(user_variable); FileInputStream user_variable = null; InputStreamReader user_variable = null; BufferedReader user_variable = null; if (file.exists() && file.isFile()) user_variable = new FileInputStream(file); user_variable = new InputStreamReader(user_variable, ""UTF-8""); user_variable = new BufferedReader(user_variable); IO.writeLine(user_variable.readLine()); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variable = null; return user_variable; public String 1Source() throws Throwable String user_variable; user_variable = null; user_variable = ""foo""; return user_variable; public String 2Source() throws Throwable String user_variable; user_variable = ""foo""; user_variable = null; return user_variable;",non-vuln
1360,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Sink(user_variable  ); private void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); user_methodB2GSink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private int user_methodSource() throws Throwable int user_variable; user_variable = (new SecureRandom()).nextInt(); return user_variable;",non-vuln
1361,"public void user_method() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
1362,"public void Sink(String user_variableArray[] , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableArray[2]; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1363,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable , request, response); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  baseObject.action(user_variable , request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable; public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1364,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1365,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1366,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); HashMap<Integer,Integer> user_variableHashMap = new HashMap<Integer,Integer>(); user_variableHashMap.put(0, user_variable); user_variableHashMap.put(1, user_variable); user_variableHashMap.put(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1367,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable; public int Source(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Cookie cookieSources[] = request.getCookies(); if (cookieSources != null) String stringNumber = cookieSources[0].getValue(); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception reading user_variable from cookie"", exceptNumberFormat); return user_variable;",non-vuln
1368,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1369,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); String stringNumber = properties.getProperty(""user_variable""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); Vector<Integer> user_variableVector = new Vector<Integer>(5); user_variableVector.add(0, user_variable); user_variableVector.add(1, user_variable); user_variableVector.add(2, user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1370,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1371,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1372,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G1PublicStatic = false; private void user_methodB2G2() throws Throwable int user_variable = 0; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_methodB2G2PublicStatic = true; private void () throws Throwable int user_variable = 0; user_variable = 2; PublicStatic = true; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1373,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1374,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1375,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]);",non-vuln
1376,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42; private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) array[user_variable] = 42; IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1377,"public void user_method() throws Throwable user_methodB2G1(); user_methodB2G2(); (); private void user_methodB2G1() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable ); private void user_methodB2G1Sink(int user_variable ) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G2() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getProperty(""user.home""); user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable ); private void user_methodB2G2Sink(int user_variable ) throws Throwable if (user_methodB2G2Private) int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; Private = true; Sink(user_variable ); private void Sink(int user_variable ) throws Throwable if (Private) int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1378,"public void user_methodB2GSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1379,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variableCopy; int user_variable; user_variable = 2; user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int user_variableCopy; int user_variable; user_variable = Integer.MIN_VALUE;  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); user_variableCopy = user_variable; int user_variable = user_variableCopy; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private void user_methodSink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1380,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); private void user_methodB2G() throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public int user_methodSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable; public int Source() throws Throwable int user_variable; user_variable = 2; return user_variable; public int user_methodB2GSource() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Socket user_variable = null; InputStreamReader readerInputStream = null; user_variable = new Socket(""host.example.org"", 39544); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); return user_variable;",non-vuln
1381,"public void user_method() throws Throwable (); user_methodB2G(); private void Sink() throws Throwable int user_variable = user_variableGoodG2B; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void () throws Throwable int user_variable; user_variable = 2; user_variableGoodG2B = user_variable; Sink(); private void user_methodB2GSink() throws Throwable int user_variable = user_variableGoodB2G; int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; connection = IO.getDBConnection(); preparedStatement = connection.prepareStatement(""select name from users where id=0""); resultSet = preparedStatement.executeQuery(); String stringNumber = resultSet.getString(1); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with SQL statement"", exceptSql); if (resultSet != null) resultSet.close(); IO.logger.log(Level.WARNING, ""Error closing ResultSet"", exceptSql); if (preparedStatement != null) preparedStatement.close(); IO.logger.log(Level.WARNING, ""Error closing PreparedStatement"", exceptSql); if (connection != null) connection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); user_variableGoodB2G = user_variable; user_methodB2GSink(); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1382,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  File file = new File(""C:\\user_variable.txt""); FileInputStream streamFileInput = null; InputStreamReader readerInputStream = null; streamFileInput = new FileInputStream(file); readerInputStream = new InputStreamReader(streamFileInput, ""UTF-8""); if (stringNumber != null)  user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); int[] user_variableArray = new int[5]; user_variableArray[2] = user_variable; public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1383,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), ""&""); while (tokenizer.hasMoreTokens()) String token = tokenizer.nextToken();  if(token.startsWith(""id=""))  user_variable = Integer.parseInt(token.substring(3));  IO.logger.log(Level.WARNING, ""Number format exception reading id from query string"", exceptNumberFormat); break;  Container user_variableContainer = new Container(); user_variableContainer.containerOne = user_variable;",non-vuln
1384,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1385,"public void Sink(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds"");",non-vuln
1386,"public void user_methodSink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1387,"public void user_methodB2GSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = (String)user_variableObject; if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable);",non-vuln
1388,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  URLConnection urlConnection = (new URL(""http://www.example.org/"")).openConnection(); InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(urlConnection.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1389,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; int array[] = null; if (user_variable >= 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  String stringNumber = System.getenv(""ADD""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); int array[] = null; if (user_variable > 0) array = new int[user_variable]; IO.writeLine(""Array size is negative""); array[0] = 5; IO.writeLine(array[0]); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1390,"public void user_method() throws Throwable (); private void Sink(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); private void () throws Throwable String user_variable; user_variable = ""foo""; Sink(user_variable  ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); private String user_methodSource() throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); return user_variable;",non-vuln
1391,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; if (user_variable != null) response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  ServerSocket listener = null; Socket user_variable = null; InputStreamReader readerInputStream = null; listener = new ServerSocket(39543); user_variable = listener.accept(); readerInputStream = new InputStreamReader(user_variable.getInputStream(), ""UTF-8""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); if (user_variable != null) user_variable.close(); IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO); if (listener != null) listener.close(); IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.setHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1392,"public void user_method() throws Throwable (); private void () throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public String user_methodSource() throws Throwable String user_variable; user_variable = System.getenv(""ADD""); return user_variable; public String Source() throws Throwable String user_variable; user_variable = ""foo""; return user_variable;",non-vuln
1393,"public void user_methodSink(Object user_variableObject , HttpServletRequest request, HttpServletResponse response) throws Throwable int user_variable = (Integer)user_variableObject; int array[] =  0, 1, 2, 3, 4 ; array[user_variable] = 42;",non-vuln
1394,"public void user_method() throws Throwable (); user_methodB2G(); private void () throws Throwable int user_variable; user_variable = 2; baseObject.action(user_variable ); private void user_methodB2G() throws Throwable int user_variable; user_variable = Integer.MIN_VALUE;  InputStreamReader readerInputStream = null; readerInputStream = new InputStreamReader(System.in, ""UTF-8""); if (stringNumber != null) // avoid NPD incidental warnings user_variable = Integer.parseInt(stringNumber.trim()); IO.logger.log(Level.WARNING, ""Number format exception parsing user_variable from string"", exceptNumberFormat); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (readerInputStream != null) readerInputStream.close(); IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO); baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]); public abstract void action(int user_variable ) throws Throwable; public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; if (user_variable >= 0 && user_variable < array.length) IO.writeLine(array[user_variable]); IO.writeLine(""Array index out of bounds""); public void action(int user_variable ) throws Throwable int array[] =  0, 1, 2, 3, 4 ; IO.writeLine(array[user_variable]);",non-vuln
1395,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable (request, response); user_methodB2G(request, response); private void Sink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodG2B; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", user_variable); response.addCookie(cookieSink); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; user_variableGoodG2B = user_variable; Sink(request, response); private void user_methodB2GSink(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable = user_variableGoodB2G; if (user_variable != null) Cookie cookieSink = new Cookie(""lang"", URLEncoder.encode(user_variable, ""UTF-8"")); response.addCookie(cookieSink); private void user_methodB2G(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_variableGoodB2G = user_variable; user_methodB2GSink(request, response); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args);",non-vuln
1396,"public void user_method(HttpServletRequest request, HttpServletResponse response) throws Throwable user_methodB2G1(request, response); user_methodB2G2(request, response); (request, response); private void user_methodB2G1(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G1Private = false; user_methodB2G1Sink(user_variable , request, response); private void user_methodB2G1Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G1Private) IO.writeLine(""Benign, fixed string""); if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void user_methodB2G2(HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = """";  Properties properties = new Properties(); FileInputStream streamFileInput = null; streamFileInput = new FileInputStream(""../common/config.properties""); properties.load(streamFileInput); user_variable = properties.getProperty(""user_variable""); IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO); if (streamFileInput != null) streamFileInput.close(); IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO); user_methodB2G2Private = true; user_methodB2G2Sink(user_variable , request, response); private void user_methodB2G2Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (user_methodB2G2Private) if (user_variable != null) user_variable = URLEncoder.encode(user_variable, ""UTF-8""); response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); private void (HttpServletRequest request, HttpServletResponse response) throws Throwable String user_variable; user_variable = ""foo""; Private = true; Sink(user_variable , request, response); private void Sink(String user_variable , HttpServletRequest request, HttpServletResponse response) throws Throwable if (Private) if (user_variable != null) response.addHeader(""Location"", ""/author.jsp?lang="" + user_variable); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public static boolean user_methodPublicStatic = false;",non-vuln
1397,"public void user_method() throws Throwable (); private void () throws Throwable String user_variable; user_variable = ""foo""; baseObject.action(user_variable ); public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException mainFromParent(args); public void action(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql); public abstract void action(String user_variable ) throws Throwable; public void action(String user_variable ) throws Throwable Connection user_variable= null; user_variable= IO.getDBConnection(); dbConnection.setCatalog(user_variable); IO.logger.log(Level.WARNING, ""Error getting user_variablebase connection"", exceptSql); if (user_variable!= null) dbConnection.close(); IO.logger.log(Level.WARNING, ""Error closing Connection"", exceptSql);",non-vuln
